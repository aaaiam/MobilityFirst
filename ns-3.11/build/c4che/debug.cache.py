AR = '/usr/bin/ar'
ARFLAGS = 'rcs'
BOOST = 'Version 1_47 (/opt/local/include)'
BOOST_VERSION = '1_47'
CC = ['/usr/bin/gcc']
CCDEFINES = ['_DEBUG', '_DEBUG', 'NS3_ASSERT_ENABLE', 'NS3_LOG_ENABLE']
CCDEFINES_ST = '-D%s'
CCFLAGS = ['-O0', '-ggdb', '-g3', '-Wall', '-Werror', '-O0', '-ggdb', '-g3', '-Wall', '-Werror', '-Wno-error=deprecated-declarations', '-fstrict-aliasing', '-Wstrict-aliasing']
CCFLAGS_DEBUG = ['-g']
CCFLAGS_MACBUNDLE = ['-fPIC']
CCFLAGS_RELEASE = ['-O2']
CCLNK_SRC_F = ''
CCLNK_TGT_F = ['-o', '']
CC_NAME = 'gcc'
CC_SRC_F = ''
CC_TGT_F = ['-c', '-o', '']
CC_VERSION = ('4', '2', '1')
COMPILER_CC = 'gcc'
COMPILER_CXX = 'g++'
CPP = '/usr/bin/cpp'
CPPPATH_BOOST = '/opt/local/include'
CPPPATH_LIBXML2 = ['/usr/include/libxml2']
CPPPATH_ST = '-I%s'
CXX = ['/usr/bin/g++']
CXXDEFINES = ['_DEBUG', 'NS3_ASSERT_ENABLE', 'NS3_LOG_ENABLE']
CXXDEFINES_ST = '-D%s'
CXXFLAGS = ['-O0', '-ggdb', '-g3', '-Wall', '-Werror', '-Wno-error=deprecated-declarations', '-fstrict-aliasing', '-Wstrict-aliasing']
CXXFLAGS_DEBUG = ['-g']
CXXFLAGS_RELEASE = ['-O2']
CXXLNK_SRC_F = ''
CXXLNK_TGT_F = ['-o', '']
CXX_NAME = 'gcc'
CXX_SRC_F = ''
CXX_TGT_F = ['-c', '-o', '']
DEST_CPU = 'x86_64'
DEST_OS = 'darwin'
DOXYGEN = ''
ENABLE_EMU = False
ENABLE_EXAMPLES = True
ENABLE_GSL = False
ENABLE_GTK_CONFIG_STORE = False
ENABLE_LIBXML2 = True
ENABLE_NSC = False
ENABLE_PYTHON_BINDINGS = False
ENABLE_PYTHON_PCH = False
ENABLE_STATIC_NS3 = False
ENABLE_SUDO = False
ENABLE_TAP = False
ENABLE_TESTS = False
ENABLE_THREADING = True
EXAMPLE_DIRECTORIES = ['energy', 'error-model', 'ipv6', 'matrix-topology', 'mobility', 'naming', 'realtime', 'routing', 'socket', 'stats', 'tcp', 'tutorial', 'udp', 'udp-client-server', 'wireless']
FULLSTATIC_MARKER = '-static'
GSL = False
GTK_CONFIG_STORE = False
HAVE_GETENV = 1
HAVE_IF_TUN_H = ()
HAVE_INTTYPES_H = 1
HAVE_LIBXML2 = 1
HAVE_NETINET_IN_H = 1
HAVE_PACKET_H = ()
HAVE_PTHREAD_H = 1
HAVE_SIGNAL_H = 1
HAVE_STDINT_H = 1
HAVE_STDLIB_H = 1
HAVE_SYS_INT_TYPES_H = ()
HAVE_SYS_SOCKET_H = 1
HAVE_UINT128_T = ()
HAVE___UINT128_T = 1
INT64X64_USE_128 = 1
LIBPATH_BOOST_FILESYSTEM = ['/opt/local/lib']
LIBPATH_BOOST_SIGNALS = ['/opt/local/lib']
LIBPATH_ST = '-L%s'
LIBXML2 = True
LIB_BOOST_FILESYSTEM = ['boost_filesystem-mt']
LIB_BOOST_SIGNALS = ['boost_signals-mt']
LIB_LIBXML2 = ['xml2']
LIB_SQLITE3 = ['sqlite3']
LIB_ST = '-l%s'
LINKFLAGS_MACBUNDLE = ['-bundle', '-undefined', 'dynamic_lookup']
LINK_CC = ['/usr/bin/gcc']
LINK_CXX = ['/usr/bin/g++']
MPI = ''
NS3_ACTIVE_VARIANT = 'debug'
NS3_BUILDDIR = '/Users/rony/ns-allinone-3.11/ns-3.11/build'
NS3_ENABLED_MODULES = ['ns3-core', 'ns3-network', 'ns3-config-store', 'ns3-internet', 'ns3-propagation', 'ns3-point-to-point', 'ns3-csma', 'ns3-emu', 'ns3-bridge', 'ns3-tap-bridge', 'ns3-virtual-net-device', 'ns3-applications', 'ns3-nix-vector-routing', 'ns3-olsr', 'ns3-aodv', 'ns3-dsdv', 'ns3-click', 'ns3-openflow', 'ns3-mobility', 'ns3-wifi', 'ns3-netanim', 'ns3-stats', 'ns3-uan', 'ns3-spectrum', 'ns3-mesh', 'ns3-test', 'ns3-ns3tcp', 'ns3-ns3wifi', 'ns3-flow-monitor', 'ns3-wimax', 'ns3-lte', 'ns3-mpi', 'ns3-topology-read', 'ns3-energy', 'ns3-tools', 'ns3-visualizer', 'ns3-point-to-point-layout', 'ns3-csma-layout', 'ns3-template', 'ns3-mobilityfirst', 'ns3-bypass']
NS3_MODULES = ['ns3-core', 'ns3-network', 'ns3-config-store', 'ns3-internet', 'ns3-propagation', 'ns3-point-to-point', 'ns3-csma', 'ns3-emu', 'ns3-bridge', 'ns3-tap-bridge', 'ns3-virtual-net-device', 'ns3-applications', 'ns3-nix-vector-routing', 'ns3-olsr', 'ns3-aodv', 'ns3-dsdv', 'ns3-click', 'ns3-openflow', 'ns3-mobility', 'ns3-wifi', 'ns3-netanim', 'ns3-stats', 'ns3-uan', 'ns3-spectrum', 'ns3-mesh', 'ns3-test', 'ns3-ns3tcp', 'ns3-ns3wifi', 'ns3-flow-monitor', 'ns3-wimax', 'ns3-lte', 'ns3-mpi', 'ns3-topology-read', 'ns3-energy', 'ns3-tools', 'ns3-visualizer', 'ns3-point-to-point-layout', 'ns3-csma-layout', 'ns3-template', 'ns3-mobilityfirst', 'ns3-bypass']
NS3_MODULE_PATH = ['/Users/rony/ns-allinone-3.11/ns-3.11/build/debug']
NS3_OPTIONAL_FEATURES = [('Threading', 'Threading Primitives', True, '<pthread.h> include not detected'), ('RealTime', 'Real Time Simulator', False, 'librt is not available'), ('EmuNetDevice', 'Emulated Net Device', False, '<netpacket/packet.h> include not detected'), ('TapBridge', 'Tap Bridge', False, '<linux/if_tun.h> include not detected'), ('GtkConfigStore', 'GtkConfigStore', False, "library 'gtk+-2.0 >= 2.12' not found"), ('XmlIo', 'XmlIo', True, "library 'libxml-2.0 >= 2.7' not found"), ('nsc', 'Network Simulation Cradle', False, 'architecture None not supported'), ('nsclick', 'NS-3 Click Integration', False, 'nsclick not enabled (see option --with-nsclick)'), ('openflow', 'NS-3 OpenFlow Integration', False, 'OpenFlow not enabled (see option --with-openflow)'), ('SqliteDataOutput', 'SQlite stats data output', True, "library 'sqlite3' not found"), ('python', 'Python Bindings', False, 'disabled by user request'), ('mpi', 'MPI Support', False, 'option --enable-mpi not selected'), ('ENABLE_SUDO', 'Use sudo to set suid bit', False, 'option --enable-sudo not selected'), ('ENABLE_TESTS', 'Build tests', False, 'defaults to disabled'), ('ENABLE_EXAMPLES', 'Build examples', True, 'option --enable-examples selected'), ('static', 'Static build', False, 'option --enable-static not selected'), ('GSL', 'GNU Scientific Library (GSL)', False, 'GSL not found')]
NSC_ENABLED = False
PKG_CONFIG = '/sw/bin/pkg-config'
PLATFORM = 'darwin'
PREFIX = '/usr/local'
RANLIB = '/usr/bin/ranlib'
RPATH_ST = '-Wl,-rpath,%s'
SHLIB_MARKER = ''
SONAME_ST = ''
SQLITE_STATS = True
STATICLIBPATH_ST = '-L%s'
STATICLIB_MARKER = ''
STATICLIB_ST = '-l%s'
SUDO = '/usr/bin/sudo'
VALGRIND = ''
WITH_NSC = '/Users/rony/ns-allinone-3.11/nsc-0.5.2'
_VARIANT_ = 'debug'
cfg_files = ['ns3/core-config.h', 'ns3/config-store-config.h']
defines = {'HAVE_GETENV': 1, 'HAVE_LIBXML2': 1, 'HAVE_INTTYPES_H': 1, 'HAVE_SYS_SOCKET_H': 1, 'HAVE_SIGNAL_H': 1, 'HAVE_NETINET_IN_H': 1, 'HAVE___UINT128_T': 1, 'HAVE_IF_TUN_H': (), 'HAVE_SYS_INT_TYPES_H': (), 'HAVE_UINT128_T': (), 'HAVE_STDLIB_H': 1, 'HAVE_PTHREAD_H': 1, 'INT64X64_USE_128': 1, 'HAVE_PACKET_H': (), 'HAVE_STDINT_H': 1}
macbundle_PATTERN = '%s.bundle'
program_PATTERN = '%s'
shlib_CCFLAGS = ['-fPIC', '-compatibility_version', '1', '-current_version', '1']
shlib_CXXFLAGS = ['-fPIC', '-compatibility_version', '1', '-current_version', '1']
shlib_LINKFLAGS = ['-dynamiclib']
shlib_PATTERN = 'lib%s.dylib'
staticlib_LINKFLAGS = []
staticlib_PATTERN = 'lib%s.a'
